(radix_sort
 (radixsort_permutes 0
  (radixsort_permutes-1 nil 3780211245
   ("" (skeep)
    (("" (expand "permutations")
      (("" (skeep)
        (("" (expand "radixsort")
          (("" (lemma "merge_sort_is_permutation[T, <<]")
            (("" (expand "permutations")
              (("" (inst? -1)
                (("" (replaces)
                  (("" (lemma "merge_sort_is_permutation[T, <=]")
                    (("" (expand "permutations")
                      (("" (inst? -1) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((permutations const-decl "bool" sorting_aux nil)
    (radixsort const-decl "list[T]" radix_sort nil)
    (merge_sort def-decl "list[T]" mergesort nil)
    (<= formal-const-decl "(total_preorder?[T])" radix_sort nil)
    (list type-decl nil list_adt nil)
    (merge_sort_is_permutation formula-decl nil mergesort nil)
    (T formal-type-decl nil radix_sort nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (total_preorder? const-decl "bool" total_preorder nil)
    (<< formal-const-decl "(total_preorder?[T])" radix_sort nil))
   shostak))
 (lex_is_total_preorder 0
  (lex_is_total_preorder-1 nil 3780347985
   ("" (typepred "<<")
    (("" (typepred "<=")
      (("" (expand "total_preorder?")
        (("" (expand "preorder?")
          (("" (expand "reflexive?")
            (("" (expand "transitive?")
              (("" (expand "dichotomous?")
                (("" (flatten)
                  (("" (expand "lex")
                    (("" (split)
                      (("1" (skeep)
                        (("1" (inst? -1)
                          (("1" (inst? -4) (("1" (assert) nil nil))
                            nil))
                          nil))
                        nil)
                       ("2" (skeep)
                        (("2" (inst-cp -4 "x" "y" "z")
                          (("2" (inst-cp -8 "x" "y" "z")
                            (("2" (prop)
                              (("1"
                                (inst -9 "y" "z" "x")
                                (("1" (assert) nil nil))
                                nil)
                               ("2"
                                (inst -9 "y" "z" "x")
                                (("2" (assert) nil nil))
                                nil)
                               ("3"
                                (inst -11 "y" "z" "x")
                                (("3" (assert) nil nil))
                                nil)
                               ("4"
                                (inst -11 "z" "x" "y")
                                (("4" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("3" (skeep)
                        (("3" (inst? -6)
                          (("3" (inst? -3) (("3" (prop) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((<= formal-const-decl "(total_preorder?[T])" radix_sort nil)
    (preorder? const-decl "bool" orders nil)
    (transitive? const-decl "bool" relations nil)
    (lex const-decl "bool" radix_sort nil)
    (dichotomous? const-decl "bool" orders nil)
    (reflexive? const-decl "bool" relations nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil radix_sort nil)
    (PRED type-eq-decl nil defined_types nil)
    (total_preorder? const-decl "bool" total_preorder nil)
    (<< formal-const-decl "(total_preorder?[T])" radix_sort nil))
   shostak))
 (merge_merge_merge_TCC1 0
  (merge_merge_merge_TCC1-1 nil 3780354145 ("" (subtype-tcc) nil nil)
   nil nil))
 (radixsort_sorts 0
  (radixsort_sorts-1 nil 3780212470
   ("" (skeep)
    (("" (expand "radixsort")
      (("" (lemma "merge_merge_merge")
        (("" (inst? -1)
          (("" (replaces)
            (("" (lemma "merge_sort_is_sorted[T, lex]")
              (("1" (inst? -1) nil nil)
               ("2" (lemma "lex_is_total_preorder")
                (("2" (propax) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((radixsort const-decl "list[T]" radix_sort nil)
    (T formal-type-decl nil radix_sort nil)
    (list type-decl nil list_adt nil)
    (lex const-decl "bool" radix_sort nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (merge_sort_is_sorted formula-decl nil mergesort nil)
    (total_preorder? const-decl "bool" total_preorder nil)
    (PRED type-eq-decl nil defined_types nil)
    (lex_is_total_preorder formula-decl nil radix_sort nil)
    (merge_merge_merge formula-decl nil radix_sort nil))
   shostak)))

